// <auto-generated />
using System;
using MetroShip.Repository.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetroShip.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.RoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e7c3bf55-d9a7-44db-98cc-0ba0a136e7a5",
                            ConcurrencyStamp = "3871ddf7-da32-40c4-b356-57a874a32258",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0bfab0b7-75e9-4024-b5c7-18c3478f61a8",
                            ConcurrencyStamp = "5c86df02-195b-41f3-86b5-fae2562d7fc6",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "ab5b94b3-ec6a-4a9b-8097-8d55f51e29b7",
                            ConcurrencyStamp = "29cced99-ac0e-4d34-b4f8-361de4ef0ef5",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AccountNo")
                        .HasMaxLength(19)
                        .HasColumnType("character varying(19)");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<int?>("BankId")
                        .HasMaxLength(6)
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OTP")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset?>("Verified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroLine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("BasePriceVndPerKm")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CarriageHeightMeter")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CarriageLenghtMeter")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CarriageWeightTons")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CarriageWidthMeter")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("CarriagesPerTrain")
                        .HasColumnType("integer");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DwellTimeMin")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LineCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LineNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LineNameVi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LineOwner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LineType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MaxHeadwayMin")
                        .HasColumnType("integer");

                    b.Property<int?>("MinHeadwayMin")
                        .HasColumnType("integer");

                    b.Property<string>("RegionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("RouteTimeMin")
                        .HasColumnType("integer");

                    b.Property<int?>("TopSpeedKmH")
                        .HasColumnType("integer");

                    b.Property<int?>("TopSpeedUdgKmH")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalKm")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("TotalStations")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt1");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id1");

                    b.ToTable("MetroLines");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroSchedule", b =>
                {
                    b.Property<string>("LineId")
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotId")
                        .HasColumnType("text");

                    b.HasKey("LineId", "TimeSlotId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("MetroSchedules");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroTimeSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsAbnormal")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MetroLineId")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Shift")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("SpecialDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("MetroLineId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt2");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id2");

                    b.ToTable("MetroTimeSlots");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ToUserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ToUserId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt3");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id3");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Parcel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("HeightCm")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("IsBulk")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("LengthCm")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ParcelCategoryId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ParcelCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("WeightKg")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("WidthCm")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ParcelCategoryId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt4");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id4");

                    b.HasIndex(new[] { "ParcelCode" }, "UQ__ParcelCode__A2A2A54B1E001898")
                        .IsUnique();

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.ParcelCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("HeightLimitCm")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBulk")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("LengthLimitCm")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("VolumeLimitCm3")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("WeightLimitKg")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("WidthLimitCm")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt5");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id5");

                    b.ToTable("ParcelCategories");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RegionCode")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt6");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id6");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt7");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id7");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Route", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<string>("FromStationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("LengthKm")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RouteNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RouteNameVi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SeqOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ToStationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TravelTimeMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromStationId");

                    b.HasIndex("LineId");

                    b.HasIndex("ToStationId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt8");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id8");

                    b.HasIndex(new[] { "RouteCode" }, "UQ__Routes__A25C5AA7CC95834E")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Shipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ArrivalStationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("BookingAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DepartureStationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("InsuranceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTimeOffset?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("PaymentTransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("PickupTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecipientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RecipientNationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset?>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ShipmentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TimeSlot")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt9");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id9");

                    b.HasIndex(new[] { "TrackingCode" }, "UQ__Shipment__A2A2A54B59D458B2")
                        .IsUnique();

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.ShipmentItinerary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EstimatedDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LegOrder")
                        .HasColumnType("integer");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt10");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id10");

                    b.ToTable("ShipmentItineraries");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.ShipmentTracking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StationId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("StationId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt11");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id11");

                    b.ToTable("ShipmentTrackings");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnderground")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("RegionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StationNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StationNameVi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt12");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id12");

                    b.HasIndex(new[] { "StationCode" }, "UQ__Stations__A25C5AA7E98BD6EC")
                        .IsUnique();

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.SupportingTicket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt13");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id13");

                    b.ToTable("SupportingTickets");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.SystemConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ConfigType")
                        .HasColumnType("integer");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "Index_CreatedAt")
                        .HasDatabaseName("Index_CreatedAt14");

                    b.HasIndex(new[] { "Id" }, "Index_Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Id14");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.UserRoleEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasDiscriminator().HasValue("UserRoleEntity");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.RefreshToken", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroLine", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Region", "Region")
                        .WithMany("MetroLines")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroSchedule", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.MetroLine", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.MetroTimeSlot", "TimeSlot")
                        .WithMany("MetroSchedules")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroTimeSlot", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.MetroLine", null)
                        .WithMany("MetroSchedules")
                        .HasForeignKey("MetroLineId");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Notification", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("ToUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Parcel", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.ParcelCategory", "ParcelCategory")
                        .WithMany("Parcels")
                        .HasForeignKey("ParcelCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.Shipment", "Shipment")
                        .WithMany("Parcels")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParcelCategory");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Report", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Route", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Station", "FromStation")
                        .WithMany("RoutesFrom")
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.MetroLine", "MetroLine")
                        .WithMany("Routes")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.Station", "ToStation")
                        .WithMany("RoutesTo")
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromStation");

                    b.Navigation("MetroLine");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Shipment", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", "Sender")
                        .WithMany("Shipments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.ShipmentItinerary", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Route", "Route")
                        .WithMany("ShipmentItineraries")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.Shipment", "Shipment")
                        .WithMany("ShipmentItineraries")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.ShipmentTracking", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Shipment", "Shipment")
                        .WithMany("ShipmentTrackings")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId");

                    b.Navigation("Shipment");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Station", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Region", "Region")
                        .WithMany("Stations")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.SupportingTicket", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Shipment", "Shipment")
                        .WithMany("SupportingTickets")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", "User")
                        .WithMany("SupportingTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.UserRoleEntity", b =>
                {
                    b.HasOne("MetroShip.Repository.Models.Identity.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroShip.Repository.Models.Identity.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Identity.UserEntity", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reports");

                    b.Navigation("Shipments");

                    b.Navigation("SupportingTickets");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroLine", b =>
                {
                    b.Navigation("MetroSchedules");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.MetroTimeSlot", b =>
                {
                    b.Navigation("MetroSchedules");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.ParcelCategory", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Region", b =>
                {
                    b.Navigation("MetroLines");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Route", b =>
                {
                    b.Navigation("ShipmentItineraries");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Shipment", b =>
                {
                    b.Navigation("Parcels");

                    b.Navigation("ShipmentItineraries");

                    b.Navigation("ShipmentTrackings");

                    b.Navigation("SupportingTickets");
                });

            modelBuilder.Entity("MetroShip.Repository.Models.Station", b =>
                {
                    b.Navigation("RoutesFrom");

                    b.Navigation("RoutesTo");
                });
#pragma warning restore 612, 618
        }
    }
}
